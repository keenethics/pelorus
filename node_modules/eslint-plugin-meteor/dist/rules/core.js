/**
 * @fileoverview Meteor Core API
 * @author Dominik Ferber
 * @copyright 2015 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

'use strict';

var _utilAst = require('../util/ast');

var _util = require('../util');

var _utilEnvironment = require('../util/environment');

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    // ---------------------------------------------------------------------------
    // Helpers
    // ---------------------------------------------------------------------------

    function disallowCoreChanges(node, report) {
      if ((0, _utilAst.isMeteorProp)(node, 'isClient') || (0, _utilAst.isMeteorProp)(node, 'isServer') || (0, _utilAst.isMeteorProp)(node, 'isCordova') || (0, _utilAst.isMeteorProp)(node, 'startup') || (0, _utilAst.isMeteorProp)(node, 'wrapAsync') || (0, _utilAst.isMeteorProp)(node, 'absoluteUrl') || (0, _utilAst.isMeteorProp)(node, 'settings') || (0, _utilAst.isMeteorProp)(node, 'release')) {
        report();
      }
    }

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR) {
      return {};
    }

    return {

      AssignmentExpression: function AssignmentExpression(node) {
        if ((0, _util.getExecutors)(env, context.getAncestors()).size === 0) {
          return;
        }
        disallowCoreChanges(node.left, function () {
          return context.report(node, 'Assignment not allowed');
        });
      },

      UpdateExpression: function UpdateExpression(node) {
        if ((0, _util.getExecutors)(env, context.getAncestors()).size === 0) {
          return;
        }

        disallowCoreChanges(node.argument, function () {
          return context.report(node, 'Update not allowed');
        });
      },

      CallExpression: function CallExpression(node) {
        if ((0, _util.getExecutors)(env, context.getAncestors()).size === 0) {
          return false;
        }

        var argumentLength = node.arguments.length;

        if ((0, _utilAst.isMeteorCall)(node, 'startup')) {
          if (argumentLength === 0) {
            return context.report(node, 'Expected one argument');
          } else if (argumentLength > 1) {
            return context.report(node, 'Expected one argument only');
          }
        } else if ((0, _utilAst.isMeteorCall)(node, 'wrapAsync')) {
          if (argumentLength === 0) {
            return context.report(node, 'Expected at least one argument');
          } else if (argumentLength > 2) {
            return context.report(node, 'Expected no more than two arguments');
          }
        } else if ((0, _utilAst.isMeteorCall)(node, 'absoluteUrl')) {
          if (argumentLength > 2) {
            return context.report(node, 'Expected no more than two arguments');
          }
        }
      }
    };
  };
};

module.exports.schema = [];