/**
 * @fileoverview Definitions for global Meteor variables based on environment
 * @author Dominik Ferber
 * @copyright 2015 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _escope = require('escope');

var _utilEnvironment = require('../util/environment');

var _utilDataGlobalsExportedByPackages = require('../util/data/globalsExportedByPackages');

var _utilDataGlobalsExportedByPackages2 = _interopRequireDefault(_utilDataGlobalsExportedByPackages);

var _util = require('../util');

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    var _getMeteorSettings = (0, _util.getMeteorSettings)(context.settings);

    var collections = _getMeteorSettings.collections;

    // ---------------------------------------------------------------------------
    // Helpers
    // ---------------------------------------------------------------------------

    function generateGlobalVariable(name, scope) {
      var variable = new _escope.Variable(name, scope);
      variable.eslintExplicitGlobal = false;
      variable.writeable = true;
      return variable;
    }

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR) {
      return {};
    }

    return {

      Program: function Program() {
        var globalScope = context.getScope();
        var variables = globalScope.variables;

        // add variables of environment to globals
        _Object$keys(_utilDataGlobalsExportedByPackages2['default']).forEach(function (globalVar) {
          var globalVarEnv = _utilDataGlobalsExportedByPackages2['default'][globalVar];
          if (globalVarEnv.indexOf(env) !== -1) {
            variables.push(generateGlobalVariable(globalVar, globalScope));
          }
        });

        // add Collections to globals
        collections.map(function (collection) {
          variables.push(generateGlobalVariable(collection, globalScope));
        });
      }
    };
  };
};

module.exports.schema = [];