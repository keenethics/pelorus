/**
 * @fileoverview Enforce check on all arguments passed to methods and publish functions
 * @author Dominik Ferber
 */

'use strict';

var _utilAst = require('../util/ast');

var _utilEnvironment = require('../util/environment');

var _util = require('../util');

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    // ---------------------------------------------------------------------------
    // Helpers
    // ---------------------------------------------------------------------------

    function auditArgumentChecks(node) {
      if (!(0, _utilAst.isFunction)(node.type)) {
        return;
      }

      var checkedParams = [];

      // short-circuit
      if (node.params.length === 0) {
        return;
      }

      if (node.body.type === 'BlockStatement') {
        node.body.body.map(function (expression) {
          if (expression.type === 'ExpressionStatement' && expression.expression.type === 'CallExpression' && expression.expression.callee.type === 'Identifier' && expression.expression.callee.name === 'check' && expression.expression.arguments.length > 1 && expression.expression.arguments[0].type === 'Identifier') {
            checkedParams.push(expression.expression.arguments[0].name);
          }
        });
      }

      node.params.map(function (param) {
        if (param.type === 'Identifier') {
          if (checkedParams.indexOf(param.name) === -1) {
            context.report(param, param.name + ' is not checked');
          }
        }
      });
    }

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR) {
      return {};
    }

    return {
      CallExpression: function CallExpression(node) {

        var executors = (0, _util.getExecutors)(env, context.getAncestors());
        if (!executors.has('server')) {
          return;
        }

        // publications
        if ((0, _utilAst.isMeteorCall)(node, 'publish') && node.arguments.length >= 2) {
          auditArgumentChecks(node.arguments[1]);
          return;
        }

        // method
        if ((0, _utilAst.isMeteorCall)(node, 'methods') && (node.arguments.length > 0 && node.arguments[0].type === 'ObjectExpression')) {
          node.arguments[0].properties.map(function (property) {
            auditArgumentChecks(property.value);
            return;
          });
        }
      }
    };
  };
};

module.exports.schema = [];