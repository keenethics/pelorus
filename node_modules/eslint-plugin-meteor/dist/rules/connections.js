/**
 * @fileoverview Core API for connections
 * @author Dominik Ferber
 * @copyright 2015 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

'use strict';

var _utilEnvironment = require('../util/environment');

var _util = require('../util');

var _utilAst = require('../util/ast');

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    // ---------------------------------------------------------------------------
    // Helpers
    // ---------------------------------------------------------------------------

    var ALLOWED_ON_CLIENT_ONLY = 'Allowed on client only';
    var ALLOWED_ON_SERVER_ONLY = 'Allowed on server only';
    var EXPECTED_ONE_ARGUMENT = 'Expected one argument';
    var EXPECTED_NO_ARGUMENTS = 'Expected no arguments';
    var ASSIGNMENT_NOT_ALLOWED = 'Assignment not allowed';

    function isDDPConnectProp(node) {
      return node.type === 'MemberExpression' && node.object.type === 'Identifier' && node.object.name === 'DDP' && (0, _utilAst.getPropertyName)(node.property) === 'connect';
    }

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR) {
      return {};
    }

    return {

      CallExpression: function CallExpression(node) {
        if (!(0, _utilAst.isMeteorCall)(node, 'status') && !(0, _utilAst.isMeteorCall)(node, 'reconnect') && !(0, _utilAst.isMeteorCall)(node, 'disconnect') && !(0, _utilAst.isMeteorCall)(node, 'onConnection') && !isDDPConnectProp(node.callee)) {
          return;
        }

        var executors = (0, _util.getExecutors)(env, context.getAncestors());
        var propertyName = (0, _utilAst.getPropertyName)(node.callee.property);

        if (propertyName === 'connect') {
          if (executors.size !== 0 && node.arguments.length !== 1) {
            context.report(node, EXPECTED_ONE_ARGUMENT);
          }
          return;
        }

        if (executors.has('server')) {
          switch (propertyName) {
            case 'status':
            case 'reconnect':
            case 'disconnect':
              context.report(node, ALLOWED_ON_CLIENT_ONLY);
              break;
            case 'onConnection':
              if (!executors.has('browser') && !executors.has('cordova') && node.arguments.length !== 1) {
                context.report(node, EXPECTED_ONE_ARGUMENT);
              }
              break;
          }
        }

        if (executors.has('browser') || executors.has('cordova')) {
          switch (propertyName) {
            case 'status':
            case 'reconnect':
            case 'disconnect':
              if (!executors.has('server') && node.arguments.length !== 0) {
                context.report(node, EXPECTED_NO_ARGUMENTS);
              }
              break;
            case 'onConnection':
              context.report(node, ALLOWED_ON_SERVER_ONLY);
              break;
          }
        }
      },

      AssignmentExpression: function AssignmentExpression(node) {
        if (!(0, _utilAst.isMeteorProp)(node.left, 'status') && !(0, _utilAst.isMeteorProp)(node.left, 'reconnect') && !(0, _utilAst.isMeteorProp)(node.left, 'disconnect') && !(0, _utilAst.isMeteorProp)(node.left, 'onConnection') && !isDDPConnectProp(node.left)) {
          return;
        }

        var executors = (0, _util.getExecutors)(env, context.getAncestors());
        if (executors.size > 0) {
          context.report(node, ASSIGNMENT_NOT_ALLOWED);
        }
      }

    };
  };
};

module.exports.schema = [];