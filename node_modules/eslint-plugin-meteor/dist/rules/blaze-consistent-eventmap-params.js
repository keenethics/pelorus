/**
 * @fileoverview Ensures consistent parameter names in blaze event maps
 * @author Philipp Sporrer, Dominik Ferber
 * @copyright 2015 Philipp Sporrer. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

'use strict';

var _utilAst = require('../util/ast');

var _util = require('../util');

var _utilEnvironment = require('../util/environment');

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    // ---------------------------------------------------------------------------
    // Helpers
    // ---------------------------------------------------------------------------

    function ensureParamName(param, expectedParamName) {
      if (param && param.name !== expectedParamName) {
        context.report(param, 'Invalid parameter name, use "' + expectedParamName + '" instead');
      }
    }

    function validateEventDef(eventDefNode) {

      var eventHandler = eventDefNode.value;
      if ((0, _utilAst.isFunction)(eventHandler.type)) {

        ensureParamName(eventHandler.params[0], context.options[0] ? context.options[0].eventParamName : 'event');

        ensureParamName(eventHandler.params[1], context.options[0] ? context.options[0].templateInstanceParamName : 'templateInstance');
      }
    }

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR) {
      return {};
    }

    return {

      CallExpression: function CallExpression(node) {

        if (node.arguments.length === 0 || !(0, _utilAst.isTemplateProp)(node.callee, 'events')) {
          return;
        }
        var executors = (0, _util.getExecutors)(env, context.getAncestors());
        if (executors.has('browser') || executors.has('cordova')) {
          var eventMap = node.arguments[0];

          if (eventMap.type === 'ObjectExpression') {
            eventMap.properties.forEach(function (eventDef) {
              return validateEventDef(eventDef);
            });
          }
        }
      }

    };
  };
};

module.exports.schema = [{
  type: 'object',
  properties: {
    eventParamName: {
      type: 'string'
    },
    templateInstanceParamName: {
      type: 'string'
    }
  },
  additionalProperties: false
}];