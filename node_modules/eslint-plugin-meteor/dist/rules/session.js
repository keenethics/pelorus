/**
 * @fileoverview Core API for Session
 * @author Dominik Ferber
 * @copyright 2015 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

'use strict';

var _utilEnvironment = require('../util/environment');

var _util = require('../util');

var _utilAst = require('../util/ast');

module.exports = function (getMeta) {
  return function (context) {
    var _getMeta = getMeta(context);

    var env = _getMeta.env;

    // ---------------------------------------------------------------------------
    // Public
    // ---------------------------------------------------------------------------

    if (env === _utilEnvironment.NON_METEOR || env === _utilEnvironment.SERVER) {
      return {};
    }

    return {

      CallExpression: function CallExpression(node) {
        if (node.callee.type === 'MemberExpression' && node.callee.object.type === 'Identifier' && node.callee.object.name === 'Session') {
          var executors = (0, _util.getExecutors)(env, context.getAncestors());
          if (executors.size === 0) {
            return;
          }
          if (executors.has('server')) {
            context.report(node, 'Allowed on client only');
            return;
          }

          switch ((0, _utilAst.getPropertyName)(node.callee.property)) {
            case 'set':
            case 'setDefault':
            case 'equals':
              if (node.arguments.length !== 2) {
                context.report(node, 'Expected two arguments');
              }
              break;
            case 'get':
              if (node.arguments.length !== 1) {
                context.report(node, 'Expected one argument');
              }
              break;
            case 'equal':
              if (context.options.length > 0 && context.options[0] === 'no-equal') {
                context.report(node.callee.property, 'Did you mean "Session.equals" instead?');
              }
              break;
          }
        }
      }

    };
  };
};

module.exports.schema = [{
  'enum': ['equal', 'no-equal']
}];