'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = getMeteorMeta;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _environment = require('../environment');

var _environment2 = _interopRequireDefault(_environment);

var _folderNames = require('../folderNames');

var _folderNames2 = _interopRequireDefault(_folderNames);

function matchLeft(dirs, list) {
  for (var i = 0; i < dirs.length; i++) {
    if (list.indexOf(dirs[i]) !== -1) {
      return dirs[i];
    }
  }
  return false;
}

function isCompatibilityMode(pathInProjectList) {
  var clientIndex = pathInProjectList.indexOf(_folderNames2['default'].CLIENT);

  // file is directly in client-folder, so it can't be in COMPATIBILITY
  if (pathInProjectList.length - 2 === clientIndex) {
    return false;
  }

  return pathInProjectList[clientIndex + 1] === _folderNames2['default'].COMPATIBILITY;
}

function isMobileConfig(pathInProjectList) {
  return pathInProjectList.length === 1 && pathInProjectList[0] === 'mobile-config.js';
}

function isPackageConfig(pathInProjectList) {
  if (pathInProjectList.length !== 3) {
    return false;
  }

  return pathInProjectList[0] === _folderNames2['default'].PACKAGES && pathInProjectList[2] === 'package.js';
}

function determineEnvironment(pathInProjectList) {

  if (pathInProjectList[0] === _folderNames2['default'].PUBLIC) {
    return _environment2['default'].PUBLIC;
  }

  if (pathInProjectList[0] === _folderNames2['default'].PRIVATE) {
    return _environment2['default'].PRIVATE;
  }

  if (isMobileConfig(pathInProjectList)) {
    return _environment2['default'].MOBILE_CONFIG;
  }

  if (isPackageConfig(pathInProjectList)) {
    return _environment2['default'].PACKAGE_CONFIG;
  }

  if (pathInProjectList.length > 2 && pathInProjectList[0] === _folderNames2['default'].PACKAGES) {
    return _environment2['default'].PACKAGE;
  }

  var specialFolders = [_folderNames2['default'].CLIENT, _folderNames2['default'].SERVER, _folderNames2['default'].TESTS, _folderNames2['default'].NODE_MODULES];

  // remove filename
  var dirList = pathInProjectList.slice(0, -1);
  var matchedEnvironment = matchLeft(dirList, specialFolders);

  switch (matchedEnvironment) {
    case _folderNames2['default'].CLIENT:
      return isCompatibilityMode(pathInProjectList) ? _environment2['default'].COMPATIBILITY : _environment2['default'].CLIENT;
    case _folderNames2['default'].SERVER:
      return _environment2['default'].SERVER;
    case _folderNames2['default'].TESTS:
      return _environment2['default'].TEST;
    case _folderNames2['default'].NODE_MODULES:
      return _environment2['default'].NODE_MODULE;
    default:
      return _environment2['default'].UNIVERSAL;
  }
}

function getMeteorFileInfo(relativeFilename) {
  var pathInProjectList = relativeFilename.split(_path2['default'].sep);
  var environment = determineEnvironment(pathInProjectList);

  return {
    path: relativeFilename,
    env: environment
  };
}

function getMeteorMeta(relativeFilename) {

  if (!relativeFilename) {

    // not in a Meteor Project
    return { env: _environment2['default'].NON_METEOR };
  }

  return getMeteorFileInfo(relativeFilename);
}

module.exports = exports['default'];