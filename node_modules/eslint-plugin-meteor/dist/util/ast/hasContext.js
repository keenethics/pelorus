'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = hasContext;
function getUpperScopes(_x2) {
  var _arguments = arguments;
  var _again = true;

  _function: while (_again) {
    var scope = _x2;
    _again = false;
    var cur = _arguments.length <= 1 || _arguments[1] === undefined ? [] : _arguments[1];

    if (!scope.upper) {
      return cur;
    }
    _arguments = [_x2 = scope.upper, [].concat(_toConsumableArray(cur), [scope.upper])];
    _again = true;
    cur = undefined;
    continue _function;
  }
}

/*
  List of scope types that change the context implicitly.

  https://github.com/estools/escope/blob/master/src/scope.js
  All possible scope types are:
    - TDZ
    - module
    - block
    - switch
    - function
    - catch
    - with
    - function
    - class
    - global
 */
var contextChangingScopeTypes = new _Set(['class', 'function']);

/**
 * Takes a scope and searches it and its ancestors for a special context.
 * If it finds a scope changing the context, it will stop the search as there is
 * no way "this" will refer to that context then.
 * @param {[Scope]} scope The scope to start the search at
 * @return {Boolean} true if the context refers to a publication function
 */

function hasContext(scope, comparator) {
  var scopes = [scope].concat(_toConsumableArray(getUpperScopes(scope)));
  var continueSearch = true;
  return scopes.reduce(function (prev, currentScope) {
    if (!continueSearch) {
      return prev;
    }
    if (comparator(currentScope)) {
      continueSearch = false;
      return true;
    } else if (

    // scope changes context, "this" no longer refers to publication
    contextChangingScopeTypes.has(currentScope.type) && (!currentScope.block || currentScope.block.type !== 'ArrowFunctionExpression')) {
      continueSearch = false;
    }
    return false;
  }, false);
}

module.exports = exports['default'];