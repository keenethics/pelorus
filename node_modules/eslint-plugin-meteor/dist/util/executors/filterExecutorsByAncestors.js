'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = filterExecutorsByAncestors;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isMeteorBlockOnlyTest = require('./isMeteorBlockOnlyTest');

var _isMeteorBlockOnlyTest2 = _interopRequireDefault(_isMeteorBlockOnlyTest);

var _getExecutorsFromTest = require('./getExecutorsFromTest');

var _getExecutorsFromTest2 = _interopRequireDefault(_getExecutorsFromTest);

var _sets = require('./sets');

// Set -> Array -> Set

function filterExecutorsByAncestors(originalExecutors, ancestors) {

  var executors = new _Set([].concat(_toConsumableArray(originalExecutors)));

  for (var i = ancestors.length - 1; i > 0; i--) {
    var current = ancestors[i];
    var _parent = ancestors[i - 1];
    if (_parent.type === 'IfStatement') {
      if ((0, _isMeteorBlockOnlyTest2['default'])(_parent.test)) {
        var executorsFromTest = (0, _getExecutorsFromTest2['default'])(_parent.test);
        if (_parent.consequent === current) {
          executors = (0, _sets.intersection)(executors, executorsFromTest);
        } else if (_parent.alternate === current) {
          executors = (0, _sets.difference)(executors, executorsFromTest);
        } else {
          (0, _invariant2['default'])(false, 'Block is neither consequent nor alternate of parent');
        }
      }
    }
  }

  return executors;
}

module.exports = exports['default'];